# Generated by Django 4.2.4 on 2023-09-16 06:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Hostel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostel_type', models.CharField(default=None, max_length=30)),
                ('caretaker', models.CharField(default=None, max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='OneteamBranch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(default=None, max_length=30)),
                ('room_no', models.IntegerField()),
                ('room_type', models.CharField(choices=[('Single', 'Single'), ('Double', 'Double'), ('Triple', 'Triple')], max_length=20)),
                ('room_capacity', models.IntegerField(default=0)),
                ('hostel', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='baseapp.hostel')),
            ],
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trainer_name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_name', models.CharField(max_length=40)),
                ('student_dob', models.DateField(help_text='Write date of birth in yyyy-mm-dd format')),
                ('student_no', models.BigIntegerField(unique=True)),
                ('student_email_id', models.EmailField(default=None, max_length=254, unique=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default=None, max_length=6)),
                ('guardian_name', models.CharField(max_length=40)),
                ('guardian_no', models.BigIntegerField(unique=True)),
                ('course_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='baseapp.course')),
                ('oneteam_branch_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='baseapp.oneteambranch')),
                ('trainer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='baseapp.trainer')),
            ],
        ),
        migrations.CreateModel(
            name='RoomAssign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_assigned_date', models.DateField(default=None)),
                ('room_left_date', models.DateField(default=None)),
                ('room', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='baseapp.room')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='baseapp.student')),
            ],
        ),
        migrations.CreateModel(
            name='Customuser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
